#Set the path and prefix of the cross-compilation toolchain
CROSS_COMPILE = /usr/local/arm/gcc/arm-2009q3/bin/arm-none-linux-gnueabi-

AS			= $(CROSS_COMPILE)as
LD			= $(CROSS_COMPILE)ld
CC			= $(CROSS_COMPILE)gcc
CPP			= $(CC) -E
AR			= $(CROSS_COMPILE)ar
NM			= $(CROSS_COMPILE)nm
STRIP		= $(CROSS_COMPILE)strip
OBJCOPY		= $(CROSS_COMPILE)objcopy
OBJDUMP		= $(CROSS_COMPILE)objdump

#Variables exported here is to be used in Makefile which is in subdirector
export AS LD CC CPP AR NM STRIP OBJCOPY OBJDUMP

#Set compiler arguments
CFLAGS := -Wall -O2 -g 
#CFLAGS += -DDEBUG

#Set the default pathname for header files
CFLAGS += -I $(shell pwd)/include -I/opt/libdecode/include 

#Set linker arguments
LDFLAGS := -ljpeg -lpng -lz   -L/opt/libdecode/lib 

export CFLAGS LDFLAGS

TOPDIR := $(shell pwd)
export TOPDIR

#Define the name of the executable file generated by the compiler
TARGET := player

#Add all .c format files in top director
obj-y += main.o 

#Add subfolder in top director(Note you should add "/" behind director name)
obj-y += display/
obj-y += image_manager/


all: 
	make -C ./ -f $(TOPDIR)/Makefile.build
	$(CC) $(LDFLAGS) -o $(TARGET) built-in.o
	cd audios; make ;cd ..

	
cp:
	cp ../imageplayer/ /root/rootfs/root/ -rf
clean:
	rm -f $(shell find -name "*.o")
	rm -f $(TARGET)

distclean:
	rm -f $(shell find -name "*.o")
	rm -f $(shell find -name "*.d")
	rm -f $(TARGET)

	